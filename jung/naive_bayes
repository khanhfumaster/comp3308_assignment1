import copy
import numpy
from math import sqrt, exp, pi

class naiveBayes():
    def __init__(self, training_data):
        self._training_data = copy.deepcopy(training_data)

    # P(class)
    def p_class(self, classifier):
        count = 0.0
        total = float(len(self._training_data))
        for instance in self._training_data:
            if instance['class'] == classifier:
                count += 1
        return count/total

    # P(E = x|class)
    def p_e_class(self, key, val, classifier):
        keys = []
        for instance in self._training_data:
            if instance['class'] == classififer:
                keys.append(instance[key])
        mean = nunmpy.mean(keys)
        

        
    
    def classify(self, instance):
        results = {}
        
